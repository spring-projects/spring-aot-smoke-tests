plugins {
	id "checkstyle"
	id "io.spring.javaformat"
	id "java-gradle-plugin"
}

repositories {
	maven {
		name "Spring Commercial Snapshot"
		url "https://repo.spring.io/artifactory/spring-commercial-snapshot-remote"
		credentials {
			username System.env['REPO_SPRING_IO_USERNAME']
			password System.env['REPO_SPRING_IO_PASSWORD']
		}
		mavenContent {
			snapshotsOnly()
			includeGroupByRegex("io.micrometer.*")
			includeGroupByRegex("org.springframework.*")
			includeGroupByRegex("io.projectreactor.*")
		}
	}
	maven {
		name "Spring Commercial Release"
		url "https://repo.spring.io/artifactory/spring-commercial-release-remote"
		credentials {
			username System.env['REPO_SPRING_IO_USERNAME']
			password System.env['REPO_SPRING_IO_PASSWORD']
		}
		mavenContent {
			releasesOnly()
			includeGroupByRegex("io.micrometer.*")
			includeGroupByRegex("org.springframework.*")
			includeGroupByRegex("io.projectreactor.*")
		}
	}
	maven {
		name "Maven Central Mirror"
		url "https://repo.spring.io/artifactory/repo1"
		credentials {
			username System.env['REPO_SPRING_IO_USERNAME']
			password System.env['REPO_SPRING_IO_PASSWORD']
		}
		mavenContent {
			releasesOnly()
		}
	}
	maven {
		name "Spring Snapshot"
		url "https://repo.spring.io/artifactory/snapshot"
		mavenContent {
			snapshotsOnly()
		}
	}
	maven {
		name "Spring Milestone"
		url "https://repo.spring.io/artifactory/milestone"
		mavenContent {
			releasesOnly()
		}
	}
}

configurations {
	all {
		resolutionStrategy {
			cacheChangingModulesFor(0, "seconds")
		}
	}
}

gradlePlugin {
	plugins {
		aotSmokeTestPlugin {
			id = "org.springframework.aot.smoke-test"
			implementationClass = "org.springframework.aot.gradle.AotSmokeTestPlugin"
		}
		aotSmokeTestAggregatorPlugin {
			id = "org.springframework.aot.smoke-test-aggregator"
			implementationClass = "org.springframework.aot.gradle.AotSmokeTestAggregatorPlugin"
		}
	}
}

new File(rootDir.parentFile.parentFile.parentFile, "gradle.properties").withInputStream {
	def properties = new Properties()
	properties.load(it)
	properties.each { key, value ->
		if (key.endsWith("Version")) {
			project.ext.set(key, value)
		}
	}
}

dependencies {
	checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:$javaFormatVersion")

	compileOnly("io.spring.javaformat:spring-javaformat-gradle-plugin:$javaFormatVersion")
	compileOnly("org.graalvm.buildtools:native-gradle-plugin:$nbtVersion")
	compileOnly("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	compileOnly("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")

	implementation("com.avast.gradle:gradle-docker-compose-plugin:0.17.6")

	testImplementation("org.junit.jupiter:junit-jupiter:5.10.1")
	testImplementation("org.mockito:mockito-core:5.7.0")
}

sourceCompatibility = "17"
targetCompatibility = "17"
